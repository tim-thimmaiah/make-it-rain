{
  "name": "hipchatter",
  "description": "Wrapper for the HipChat API (v2)",
  "version": "0.1.3",
  "author": {
    "name": "Charlton Roberts",
    "url": "http://charlton.io"
  },
  "contributors": [
    {
      "name": "Macklin Underdown",
      "email": "macklinu@gmail.com",
      "url": "http://mackli.nu"
    }
  ],
  "keywords": [
    "hipchat",
    "hip",
    "chat",
    "hip",
    "atlassian",
    "hipchatter",
    "api"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/charltoons/hipchatter.git"
  },
  "main": "hipchatter.js",
  "dependencies": {
    "needle": "~0.6.3",
    "async": "~0.2.9"
  },
  "engines": {
    "node": "*"
  },
  "devDependencies": {
    "mocha": "~1.14.0",
    "chai": "~1.8.1",
    "colors": "~0.6.2",
    "grunt": "~0.4.1",
    "grunt-execute": "~0.1.5"
  },
  "scripts": {
    "test": "mocha -t 6000 -R spec"
  },
  "readme": "HipChatter\n=============\n\n**Node.js wrapper for the HipChat API (v2)**\n\nSee the full HipChat API v2 Documentation at [https://www.hipchat.com/docs/apiv2](https://www.hipchat.com/docs/apiv2)\n\nYou can generate an API token by going to [https://hipchat.com/account/api](https://hipchat.com/account/api). You must have admin access.\n\nSource is available at [http://github.com/charltoons/hipchatter.git](http://github.com/charltoons/hipchatter.git). Pull requests welcome!\n\nNote: This is a work-in-progress, and will improve over time.\n\n[![NPM](https://nodei.co/npm/hipchatter.png?downloads=true)](https://nodei.co/npm/hipchatter/)\n\nHow to Install\n--------------\nIn your project folder:\n````bash\n    npm install hipchatter --save\n````\n\nIn your project's js file:\n````javascript\n    var Hipchatter = require('hipchatter');\n    var hipchatter = new Hipchatter(your_auth_token [, hipchat_endpoint]);\n\n    // this will list all of your rooms\n    hipchatter.rooms(function(err, rooms){\n        if(!err) console.log(rooms)\n    });\n````\n\nUsage\n----\n````javascript\n    hipchatter.<endpoint>(params, callback(err, response){\n        console.log(response);\n    });\n````\n\n- `<endpoint>` is the hipchatter function you are using.\n- `params` are the parameter required by the function\n- `err` error object if there is an error, null otherwise\n- `response` the direct response from the HipChat API (JSON)\n\nDocumentation\n-------------\n\n### hipchatter.capabilities\nReturns the capabilities descriptor for HipChat.\n\n**Parameters:** None\n\n**Results:**\n- `err`, error object if the request failed, null otherwise\n- `capabilities`, an object containing the capabilities of the HipChat API\n\n#### Usage\n````javascript\nhipchatter.capabilities(function(err, capabilities){\n    console.log(capabilities);\n});\n````\n\n### hipchatter.rooms\nReturns all of the rooms you have access to.\n\n**Parameters:** None \n\n**Results:** `err`, array of rooms\n#### Usage\n````javascript\nhipchatter.rooms(function(err, rooms){\n    console.log(rooms);\n});\n````\n\n### hipchatter.get_room\nReturns the details of a single room.\n\n**Parameters:** `room` (string) - the room name or id\n\n**Results:** \n\n- `err`, array of rooms\n- `room_details`, an object of the rooms details\n\n### hipchatter.create_room\nCreates a new room.\n\n**Parameters:** \n\n- `params` (object) - Required. Options for the new room.\n    - `'guest_access': <bool>` - Optional. Whether or not to enable guest access for this room. Defaults to false.\n    - `'name': <string>` - Required. Name of the room\n    - `'owner_user_id': <string>` - User ID or email address of the room's owner.\n    - `'privacy': <string>` - Whether the room is available for access by other users or not. (`public` or `private`)\n\n\n**Results:** \n\n- `err`, array of rooms\n- `room_details`, an object of the rooms details\n\n#### Usage\n````javascript\nhipchatter.create_room({name: 'Such Room'}, function(err, room){\n    console.log(room);\n});\n````\n\n### hipchatter.delete_room\nDelete a room.\n\n**Parameters:** \n\n- `room_name` (string) - Required. The name of the new room.\n\n\n**Results:** \n\n- `err`\n\n#### Usage\n````javascript\nhipchatter.delete_room('Such Room', function(err){\n    if(!err) console.log('\"Such Room\" successfully deleted.');\n});\n````\n\n### hipchatter.history\nThe history of one room.\n\n**Parameters:** `room` (string) — the room name or id\n\n**Results:** `err`, history (object) — the history object, the messages are in history.items (array)\n#### Usage\n````javascript\nhipchatter.history('Hipchatter Room', function(err, history){\n    // print the last message\n    console.log(history.items[items.length-1].message);\n});\n````\n\n### hipchatter.emoticons\nReturns up to 100 emoticons.\n> [HipChat API reference](https://www.hipchat.com/docs/apiv2/method/get_all_emoticons)\n\n**Parameters:** \n\n- `param` (object) - Optional. query string parameters (optional)\n    - `'start-index': <int>` - Optional. The start index for the result set. Defaults to `0`.\n    - `'max-results': <int>` - Optional. The maximum number of results. Defaults to `100`.\n    - `'type': <string>` - Optional. The type of emoticons to get. Defaults to `'all'`.\n- `param` (int) - Optional. id for single emoticon.\n- `param` (string) - Optional. shortcut for single emoticon.\n\n**Results:** `err`, response (array: list of emoticons) (object: single emoticon)\n#### Usage\n````javascript\n// default: returns array of all emoticons\nhipchatter.emoticons(function(err, emoticons){\n    console.log(emoticons);\n});\n\nhipchatter.emoticons({'start-index': 20, 'max-results': 40, 'type': 'group'}, function(err, emoticons){\n   console.log(emoticons); \n});\n\nhipchatter.emoticons(34, function(err, emoticon){\n    console.log(emoticon);\n});\n\nhipchatter.emoticons('fonzie', function(err, emoticon){\n    console.log(emoticon);\n});\n````\n\n### hipchatter.get_emoticon\nGet an emoticon by id or shortcut.\n> [HipChat API reference](https://www.hipchat.com/docs/apiv2/method/get_emoticon)\n\n**Parameters:**\n\n- `param` (int) - Required. id for single emoticon.\nor\n- `param` (string) - Required. shortcut for single emoticon.\n\n**Results:** `err`, response (object) - single emoticon details\n#### Usage\n````javascript\nhipchatter.get_emoticon(34, function(err, emoticon){\n    console.log(emoticon);\n});\n\nhipchatter.get_emoticon('fonzie', function(err, emoticon){\n    console.log(emoticon);\n});\n}\n````\n\n### hipchatter.notify\nSend a room notification.\n\n**Parameters:**\n\n- `room` (string) — the room name or id\n- `options` (object)\n    - **message** (string) - Required. Message to be sent\n    - **token** (string) - Required. The Room notification auth token. You can generate one by going to HipChat.com > Rooms tab > Click the room you want > Select Tokens [BETA] on the left-hand side > generate a new token\n    - **color** (string) - yellow (default), red, green, purple, gray, random\n    - **message_format** - html (default), text\n    - **notify** (boolean) - false (default), true\n\n**Results:** `err`\n\n#### Usage\n````javascript\nhipchatter.notify('Hipchatter Room', \n    {\n        message: 'Hello World',\n        color: 'green',\n        token: '<room notification token>'\n    }, function(err){\n        if (err == null) console.log('Successfully notified the room.');\n});\n````\n    \n### hipchatter.create_webhook\nCreate a webhook for HipChat to ping when a certain event happens in a room.\n\n**Parameters:**\n\n- `room` (string) — the room name or id\n- `options` (object)\n    - **url** - for HipChat to ping\n    - **pattern** - regex to match message against\n    - **event** - the event to listen for.\n        - Valid values: `room_message`, `room_notification`, `room_exit`, `room_enter`, `room_topic_change`\n    - **name** - name for this webhook\n\n**Results:** `err`\n\n#### Usage\n````javascript\nhipchatter.create_webhook('Hipchatter Room', \n    {\n        url: 'http://yourdomain.com',\n        event: 'room_message'\n    }, function(err){\n        if (err == null) console.log('Successfully created webhook.');\n});\n````\n\n### hipchatter.get_webhook\nGet the details of a specific webhook.\n\n**Parameters:**\n\n- `room` (string) — the room name or id\n- `webhook_id` (string) - the id for the webhook that was returned from `create_webhook`\n\n**Results:** `err`, `webhook_info`\n\n#### Usage\n````javascript\nhipchatter.get_webhook('Hipchatter Room', '12345', function(err, hook){\n        console.log(hook);\n});\n````\n\n### hipchatter.webhooks\nGet all webhooks for a room.\n\n**Parameters:** `room` (string) — the room name or id\n\n**Results:** `err`, `webhooks` (array)\n\n#### Usage\n````javascript\nhipchatter.webhooks('Hipchatter Room', function(err, hooks){\n    console.log(hooks);\n});\n````\n### hipchatter.delete_webhook\nRemove a webhook.\n\n**Parameters:**\n\n- `room` (string) - the room name or id\n- `webhook_id` (string) - the id for the webhook that was returned from `create_webhook`\n\n**Results:** `err`\n\n#### Usage\n````javascript\nhipchatter.deleted_webhook('Hipchatter Room', '12345', function(err){\n        if (err == null) console.log('Webhook sucessfully deleted');\n});\n````\n\n### hipchatter.delete\\_all_webhooks\nA convenience function to delete all webhooks associated with a room.\n\n**Parameters:** `room` (string) - the room name or id\n\n**Results:** `err`\n\n#### Usage\n````javascript\nhipchatter.delete_all_webhooks('Hipchatter Room', function(err){\n    if (err == null) console.log('All webhooks sucessfully deleted');\n});\n````\n\n### hipchatter.set_topic\nSet the topic of a room.\n\n**Parameters:** \n\n- `room` (string) - Required. The room name or id.\n- `topic` (string) - Required. The topic that this room will be set to.\n\n**Results:** `err`\n\n#### Usage\n````javascript\nhipchatter.set_topic('Hipchatter Room', 'We Are All Talking About This', function(err){\n    if (err == null) console.log('New Topic Set');\n});\n````\n\nTODO\n----\n- [] Get all tests to pass\n- [] Migrate docs to the [wiki](https://github.com/charltoons/hipchatter/wiki)\n- [] Error events for things like rate limits\n- [] Addon helpers\n- [] Add support for `expand` (https://www.hipchat.com/docs/apiv2/expansion)\n- [] Get the tests to check if the required stubs exist before running\n\nHow to Test\n-----------\n- Clone this repo\n- Copy `/test/settings.example.json` to `/test/settings.json`\n- Fill out your creds\n- `npm install`\n- `grunt stub` which creates the test room and test user\n- `npm test`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/charltoons/hipchatter/issues"
  },
  "homepage": "https://github.com/charltoons/hipchatter",
  "_id": "hipchatter@0.1.3",
  "_from": "hipchatter@"
}
